name: Test Smartspace and Teams integrations

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get Smartspace bearer token
        id: token
        env:
          TENANT: ${{ secrets.SMARTSPACE_TENANT_ID }}
          SP_CLIENT_ID: ${{ secrets.SMARTSPACE_SP_CLIENT_ID }}
          SP_CLIENT_SECRET: ${{ secrets.SMARTSPACE_SP_CLIENT_SECRET }}
          SMARTSPACE_CLIENT_ID: ${{ secrets.SMARTSPACE_CLIENT_ID }}
        run: |
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq uuid-runtime >/dev/null 2>&1 || true

          TOKEN_URL="https://login.microsoftonline.com/${TENANT}/oauth2/v2.0/token"
          SCOPE="api://${SMARTSPACE_CLIENT_ID}/.default"

          RESP=$(curl -s -X POST "$TOKEN_URL" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "client_id=${SP_CLIENT_ID}" \
            --data-urlencode "client_secret=${SP_CLIENT_SECRET}" \
            --data-urlencode "scope=${SCOPE}" \
            --data-urlencode "grant_type=client_credentials")

          ACCESS_TOKEN=$(echo "$RESP" | jq -r '.access_token // empty')
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Failed to obtain access_token from AAD"; echo "$RESP"; exit 1;
          fi
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Call Smartspace with fake payload
        id: ai
        env:
          API_URL: ${{ secrets.SMARTSPACE_API_URL }}         # your /messages/ URL
          WORKSPACE_ID: ${{ secrets.SMARTSPACE_WORKSPACE_ID }}
          ACCESS_TOKEN: ${{ steps.token.outputs.access_token }}
        run: |
          THREAD_ID=$(uuidgen | tr '[:upper:]' '[:lower:]')

          FAKE_ISSUES='[
            {"number": 101, "title": "Feat: Add search filters", "url": "https://github.com/${{ github.repository }}/issues/101"},
            {"number": 102, "title": "Fix: handle null tenant", "url": "https://github.com/${{ github.repository }}/issues/102"}
          ]'

          REQ=$(jq -n \
            --arg ws  "$WORKSPACE_ID" \
            --arg tid "$THREAD_ID" \
            --arg prv "v0.0.0" \
            --argjson issues "$FAKE_ISSUES" \
            '{
              workSpaceId: $ws,
              messageThreadId: $tid,
              inputs: [
                { "name": "previous_release_number", "value": $prv },
                { "name": "issues", "value": $issues }
              ]
            }')

          echo "Request payload:"
          echo "$REQ" | jq .

          RESP=$(curl -sS -X POST "$API_URL" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$REQ")

          echo "Smartspace response:"
          echo "$RESP" | jq .

          VERSION=$(echo "$RESP" | jq -r '.version // "v9.9.9-test"')
          NOTES=$(echo "$RESP" | jq -r '.notes_markdown // "## Test Release\n- This is a test message.\n"')

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          printf "notes<<'EOF'\n%s\nEOF\n" "$NOTES" >> $GITHUB_OUTPUT

      - name: Post to TEST Teams webhook
        if: ${{ success() }}
        env:
          TEAMS_TEST: ${{ secrets.TEAMS_WEBHOOK_URL_TEST }}
          VERSION: ${{ steps.ai.outputs.version }}
          NOTES: ${{ steps.ai.outputs.notes }}
        run: |
          if [ -z "$TEAMS_TEST" ]; then
            echo "TEAMS_WEBHOOK_URL_TEST not set; skipping message."; exit 0;
          fi

          CARD=$(jq -n --arg title "Integration test $VERSION" \
                        --arg summary "Smartspace + Teams integration test" \
                        --arg notes "$NOTES" \
          '{
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "6264A7",
            "summary": $summary,
            "title": $title,
            "sections": [ { "text": $notes } ]
          }')

          curl -s -H "Content-Type: application/json" \
               -d "$CARD" \
               "$TEAMS_TEST" > /dev/null
