{
  "meta": {
    "description": "Rules for Cursor to follow during the Smartspace UI-v2 migration (domains/ui/pages split).",
    "version": 3
  },
  "style": {
    "typescript": true,
    "preferTypeImports": true,
    "semi": true,
    "singleQuote": true,
    "printWidth": 100,
    "trailingComma": "es5"
  },
  "architecture": {
    "preferFeatureFirst": true,
    "aliases": {
      "@/*": "src/*",
      "@/platform/*": "src/platform/*",
      "@/domains/*": "src/domains/*",
      "@/ui/*": "src/ui/*",
      "@/pages/*": "src/pages/*",
      "@/shared/*": "src/shared/*"
    },
    "oneWayImports": [
      { "from": "pages/**", "to": ["ui/**", "domains/**", "shared/**", "platform/**"] },
      { "from": "ui/**", "to": ["domains/**", "shared/**", "platform/**", "ui/**"] },
      { "from": "domains/**", "to": ["shared/**", "platform/**", "domains/**"] },
      { "from": "shared/**", "to": ["shared/**"] },
      { "from": "platform/**", "to": [] }
    ],
    "disallowFeatureToFeatureImports": true,
    "newCodeGoesIn": [
      "src/platform/**",
      "src/domains/**",
      "src/ui/**",
      "src/pages/**",
      "src/shared/**",
      "src/mocks/**",
      "src/tests/**"
    ]
  },
  "routing": {
    "library": "tanstack-router",
    "paramsAreSourceOfTruth": true,
    "searchStateInUrl": true,
    "expectedParams": ["workspaceId", "threadId"],
    "expectedSearch": ["panel", "q", "status", "sort", "tags", "cursor"],
    "validateSearchWithZod": true,
    "useNavigatePatch": true
  },
  "data": {
    "serverStateLibrary": "tanstack-query",
    "queryKeysPattern": true,
    "avoidManualFetchInComponents": true,
    "zodAtApiBoundary": true,
    "normalizeErrors": true,
    "preferNonBlockingFetch": true
  },
  "theming": {
    "library": "mui",
    "useThemeProvider": true,
    "tokensFile": "src/platform/theme/tokens.ts",
    "createThemeFile": "src/platform/theme/createMuiTheme.ts",
    "overridesAllowed": true,
    "mobileBehavior": {
      "navDrawer": { "desktop": "permanent", "mobile": "temporary" },
      "commentsDrawer": { "desktop": "permanent", "mobile": "bottom-sheet" },
      "composerUsesSafeArea": true
    }
  },
  "vmRules": {
    "useVMOnlyWhen": [
      "multi-step/wizard logic",
      "keyboard/gesture rules",
      "optimistic updates / cache coordination",
      "composes multiple domain hooks",
      "significant derived/validated state"
    ],
    "skipVMWhen": [
      "presentational component",
      "trivial handlers",
      "small and obvious (< ~100 LOC)"
    ],
    "colocation": "VM hooks live next to their component as use<Component>VM.ts",
    "testing": "VMs get unit tests; components get UI state tests"
  },
  "testing": {
    "testRunner": "vitest",
    "componentTesting": "react-testing-library",
    "networkMocking": "msw",
    "placeTestsNextToComponents": true,
    "useRenderWithAppHelper": true,
    "whatToTestNow": ["zodSchemas", "hookLogicIfNonTrivial"],
    "whatToTestLater": ["componentFlows", "pageHappyPath", "errorStates"]
  },
  "scaffolds": {
    "domain": {
      "files": [
        "src/domains/{name}/schemas.ts",
        "src/domains/{name}/queryKeys.ts",
        "src/domains/{name}/service.ts",
        "src/domains/{name}/use{name|pascal}.ts",
        "src/domains/{name}/index.ts"
      ]
    },
    "uiFeature": {
      "files": [
        "src/ui/{name}/{name|pascal}.tsx",
        "src/ui/{name}/__tests__/{name|pascal}.test.tsx"
      ]
    },
    "test": {
      "renderHelper": "src/tests/render.tsx",
      "setup": "src/tests/setup.ts",
      "server": "src/tests/testServer.ts"
    }
  },
  "instructions": [
    "Use TanStack Router for routing. Never introduce react-router.",
    "Put selection IDs (workspaceId, threadId) in params, not in context.",
    "Put shareable UI state (panel, q, status, sort, tags, cursor) in URL search and validate via Zod.",
    "Fetch data with TanStack Query hooks; render skeletons/empty/error states in UI.",
    "All network responses must be parsed with Zod in service.ts via platform/envelopes.ts.",
    "Create queryKeys.ts per domain; compose keys with params/search where relevant.",
    "Prefer MUI primitives; style via theme overrides and sx, not inline CSS or Tailwind.",
    "Tests: use Vitest + React Testing Library. Mock network with MSW only.",
    "Place tests next to components (Component.test.tsx). Prefer role/name queries over test IDs.",
    "Do not import across domains; share via src/shared if necessary.",
    "Favor small components; promote complex behavior into a colocated VM hook.",
    "When adding filters/search, debounce before writing to URL and reset pagination cursor.",
    "Domain-specific error helpers must live inside their domain folder (e.g., src/domains/messages/errors.ts)."
  ],
  "fileGuards": {
    "avoidEditsIn": ["node_modules/**", "dist/**", "build/**", "coverage/**"]
  },
  "rewriteRules": [
    {
      "pattern": "src/components/**",
      "action": "migrate-to-ui-feature",
      "note": "Place presentational UI into src/ui/<area>."
    },
    {
      "pattern": "src/api/**",
      "action": "migrate-to-domain-service-with-zod",
      "note": "Use service.ts + Zod parse; expose typed hooks in the domain."
    }
  ],
  "naming": {
    "componentsPascalCase": true,
    "hooksCamelCaseWithUsePrefix": true,
    "testsSuffix": ".test.tsx",
    "serviceFile": "service.ts",
    "queryKeysFile": "queryKeys.ts"
  },
  "commits": {
    "conventionalCommits": true,
    "allowedTypes": ["feat", "fix", "refactor", "chore", "docs", "test", "perf", "style"],
    "examples": [
      "feat(domain:messages): add optimistic send with rollback",
      "feat(ui/messages): list skeleton and empty states",
      "refactor(platform): extract QueryClient factory",
      "chore(ci): add typecheck/lint/test/build workflow",
      "docs(readme): add architecture & GIFs"
    ]
  },
  "prs": {
    "smallScopedChanges": true,
    "requireScreenshotsWhenUiChanges": true,
    "checklist": [
      "Typecheck passes",
      "Lint passes",
      "Tests exist or placeholders added",
      "Coverage >= thresholds",
      "Build succeeds",
      "PROGRESS.md updated"
    ]
  }
}
{
  "meta": {
    "description": "Rules for Cursor to follow during the Smartspace UI-v2 migration (domains/ui/pages split).",
    "version": 3
  },
  "style": {
    "typescript": true,
    "preferTypeImports": true,
    "semi": true,
    "singleQuote": true,
    "printWidth": 100,
    "trailingComma": "es5"
  },
  "architecture": {
    "preferFeatureFirst": true,
    "aliases": {
      "@/*": "src/*",
      "@/platform/*": "src/platform/*",
      "@/domains/*": "src/domains/*",
      "@/ui/*": "src/ui/*",
      "@/pages/*": "src/pages/*",
      "@/shared/*": "src/shared/*"
    },
    "oneWayImports": [
      { "from": "pages/**", "to": ["ui/**", "domains/**", "shared/**", "platform/**"] },
      { "from": "ui/**", "to": ["domains/**", "shared/**", "platform/**", "ui/**"] },
      { "from": "domains/**", "to": ["shared/**", "platform/**", "domains/**"] },
      { "from": "shared/**", "to": ["shared/**"] },
      { "from": "platform/**", "to": [] }
    ],
    "disallowFeatureToFeatureImports": true,
    "newCodeGoesIn": [
      "src/platform/**",
      "src/domains/**",
      "src/ui/**",
      "src/pages/**",
      "src/shared/**",
      "src/mocks/**",
      "src/tests/**"
    ]
  },
  "routing": {
    "library": "tanstack-router",
    "paramsAreSourceOfTruth": true,
    "searchStateInUrl": true,
    "expectedParams": ["workspaceId", "threadId"],
    "expectedSearch": ["panel", "q", "status", "sort", "tags", "cursor"],
    "validateSearchWithZod": true,
    "useNavigatePatch": true
  },
  "data": {
    "serverStateLibrary": "tanstack-query",
    "queryKeysPattern": true,
    "avoidManualFetchInComponents": true,
    "zodAtApiBoundary": true,
    "normalizeErrors": true,
    "preferNonBlockingFetch": true
  },
  "theming": {
    "library": "mui",
    "useThemeProvider": true,
    "tokensFile": "src/platform/theme/tokens.ts",
    "createThemeFile": "src/platform/theme/createMuiTheme.ts",
    "overridesAllowed": true,
    "mobileBehavior": {
      "navDrawer": { "desktop": "permanent", "mobile": "temporary" },
      "commentsDrawer": { "desktop": "permanent", "mobile": "bottom-sheet" },
      "composerUsesSafeArea": true
    }
  },
  "vmRules": {
    "useVMOnlyWhen": [
      "multi-step/wizard logic",
      "keyboard/gesture rules",
      "optimistic updates / cache coordination",
      "composes multiple domain hooks",
      "significant derived/validated state"
    ],
    "skipVMWhen": [
      "presentational component",
      "trivial handlers",
      "small and obvious (< ~100 LOC)"
    ],
    "colocation": "VM hooks live next to their component as use<Component>VM.ts",
    "testing": "VMs get unit tests; components get UI state tests"
  },
  "testing": {
    "testRunner": "vitest",
    "componentTesting": "react-testing-library",
    "networkMocking": "msw",
    "placeTestsNextToComponents": true,
    "useRenderWithAppHelper": true,
    "whatToTestNow": ["zodSchemas", "hookLogicIfNonTrivial"],
    "whatToTestLater": ["componentFlows", "pageHappyPath", "errorStates"]
  },
  "scaffolds": {
    "domain": {
      "files": [
        "src/domains/{name}/schemas.ts",
        "src/domains/{name}/queryKeys.ts",
        "src/domains/{name}/service.ts",
        "src/domains/{name}/use{name|pascal}.ts",
        "src/domains/{name}/index.ts"
      ]
    },
    "uiFeature": {
      "files": [
        "src/ui/{name}/{name|pascal}.tsx",
        "src/ui/{name}/__tests__/{name|pascal}.test.tsx"
      ]
    },
    "test": {
      "renderHelper": "src/tests/render.tsx",
      "setup": "src/tests/setup.ts",
      "server": "src/tests/testServer.ts"
    }
  },
  "instructions": [
    "Use TanStack Router for routing. Never introduce react-router.",
    "Put selection IDs (workspaceId, threadId) in params, not in context.",
    "Put shareable UI state (panel, q, status, sort, tags, cursor) in URL search and validate via Zod.",
    "Fetch data with TanStack Query hooks; render skeletons/empty/error states in UI.",
    "All network responses must be parsed with Zod in service.ts via platform/envelopes.ts.",
    "Create queryKeys.ts per domain; compose keys with params/search where relevant.",
    "Prefer MUI primitives; style via theme overrides and sx, not inline CSS or Tailwind.",
    "Tests: use Vitest + React Testing Library. Mock network with MSW only.",
    "Place tests next to components (Component.test.tsx). Prefer role/name queries over test IDs.",
    "Do not import across domains; share via src/shared if necessary.",
    "Favor small components; promote complex behavior into a colocated VM hook.",
    "When adding filters/search, debounce before writing to URL and reset pagination cursor.",
    "Domain-specific error helpers must live inside their domain folder (e.g., src/domains/messages/errors.ts)."
  ],
  "fileGuards": {
    "avoidEditsIn": ["node_modules/**", "dist/**", "build/**", "coverage/**"]
  },
  "rewriteRules": [
    {
      "pattern": "src/components/**",
      "action": "migrate-to-ui-feature",
      "note": "Place presentational UI into src/ui/<area>."
    },
    {
      "pattern": "src/api/**",
      "action": "migrate-to-domain-service-with-zod",
      "note": "Use service.ts + Zod parse; expose typed hooks in the domain."
    }
  ],
  "naming": {
    "componentsPascalCase": true,
    "hooksCamelCaseWithUsePrefix": true,
    "testsSuffix": ".test.tsx",
    "serviceFile": "service.ts",
    "queryKeysFile": "queryKeys.ts"
  },
  "commits": {
    "conventionalCommits": true,
    "allowedTypes": ["feat", "fix", "refactor", "chore", "docs", "test", "perf", "style"],
    "examples": [
      "feat(domain:messages): add optimistic send with rollback",
      "feat(ui/messages): list skeleton and empty states",
      "refactor(platform): extract QueryClient factory",
      "chore(ci): add typecheck/lint/test/build workflow",
      "docs(readme): add architecture & GIFs"
    ]
  },
  "prs": {
    "smallScopedChanges": true,
    "requireScreenshotsWhenUiChanges": true,
    "checklist": [
      "Typecheck passes",
      "Lint passes",
      "Tests exist or placeholders added",
      "Coverage >= thresholds",
      "Build succeeds",
      "PROGRESS.md updated"
    ]
  }
}
