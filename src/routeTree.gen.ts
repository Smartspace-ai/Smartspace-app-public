/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as _rootNotFoundRouteImport } from './routes/__root.notFound'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProtectedWorkspaceIndexRouteImport } from './routes/_protected/workspace/index'
import { Route as ProtectedWorkspaceWorkspaceIdIndexRouteImport } from './routes/_protected/workspace/$workspaceId/index'
import { Route as ProtectedWorkspaceWorkspaceId_layoutRouteImport } from './routes/_protected/workspace/$workspaceId/__layout'
import { Route as ProtectedWorkspaceWorkspaceIdThreadThreadIdRouteImport } from './routes/_protected/workspace/$workspaceId/thread/$threadId'

const ProtectedWorkspaceWorkspaceIdRouteImport = createFileRoute(
  '/_protected/workspace/$workspaceId',
)()

const _rootNotFoundRoute = _rootNotFoundRouteImport.update({
  id: '/__root/notFound',
  path: '/notFound',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedWorkspaceWorkspaceIdRoute =
  ProtectedWorkspaceWorkspaceIdRouteImport.update({
    id: '/workspace/$workspaceId',
    path: '/workspace/$workspaceId',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedWorkspaceIndexRoute = ProtectedWorkspaceIndexRouteImport.update({
  id: '/workspace/',
  path: '/workspace/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedWorkspaceWorkspaceIdIndexRoute =
  ProtectedWorkspaceWorkspaceIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ProtectedWorkspaceWorkspaceIdRoute,
  } as any)
const ProtectedWorkspaceWorkspaceId_layoutRoute =
  ProtectedWorkspaceWorkspaceId_layoutRouteImport.update({
    id: '/__layout',
    getParentRoute: () => ProtectedWorkspaceWorkspaceIdRoute,
  } as any)
const ProtectedWorkspaceWorkspaceIdThreadThreadIdRoute =
  ProtectedWorkspaceWorkspaceIdThreadThreadIdRouteImport.update({
    id: '/thread/$threadId',
    path: '/thread/$threadId',
    getParentRoute: () => ProtectedWorkspaceWorkspaceIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/notFound': typeof _rootNotFoundRoute
  '/workspace': typeof ProtectedWorkspaceIndexRoute
  '/workspace/$workspaceId': typeof ProtectedWorkspaceWorkspaceId_layoutRoute
  '/workspace/$workspaceId/': typeof ProtectedWorkspaceWorkspaceIdIndexRoute
  '/workspace/$workspaceId/thread/$threadId': typeof ProtectedWorkspaceWorkspaceIdThreadThreadIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/notFound': typeof _rootNotFoundRoute
  '/workspace': typeof ProtectedWorkspaceIndexRoute
  '/workspace/$workspaceId': typeof ProtectedWorkspaceWorkspaceIdIndexRoute
  '/workspace/$workspaceId/thread/$threadId': typeof ProtectedWorkspaceWorkspaceIdThreadThreadIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/__root/notFound': typeof _rootNotFoundRoute
  '/_protected/workspace/': typeof ProtectedWorkspaceIndexRoute
  '/_protected/workspace/$workspaceId': typeof ProtectedWorkspaceWorkspaceIdRouteWithChildren
  '/_protected/workspace/$workspaceId/__layout': typeof ProtectedWorkspaceWorkspaceId_layoutRoute
  '/_protected/workspace/$workspaceId/': typeof ProtectedWorkspaceWorkspaceIdIndexRoute
  '/_protected/workspace/$workspaceId/thread/$threadId': typeof ProtectedWorkspaceWorkspaceIdThreadThreadIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/notFound'
    | '/workspace'
    | '/workspace/$workspaceId'
    | '/workspace/$workspaceId/'
    | '/workspace/$workspaceId/thread/$threadId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/notFound'
    | '/workspace'
    | '/workspace/$workspaceId'
    | '/workspace/$workspaceId/thread/$threadId'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/login'
    | '/__root/notFound'
    | '/_protected/workspace/'
    | '/_protected/workspace/$workspaceId'
    | '/_protected/workspace/$workspaceId/__layout'
    | '/_protected/workspace/$workspaceId/'
    | '/_protected/workspace/$workspaceId/thread/$threadId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  LoginRoute: typeof LoginRoute
  _rootNotFoundRoute: typeof _rootNotFoundRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__root/notFound': {
      id: '/__root/notFound'
      path: '/notFound'
      fullPath: '/notFound'
      preLoaderRoute: typeof _rootNotFoundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/workspace/$workspaceId': {
      id: '/_protected/workspace/$workspaceId'
      path: '/workspace/$workspaceId'
      fullPath: '/workspace/$workspaceId'
      preLoaderRoute: typeof ProtectedWorkspaceWorkspaceIdRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/workspace/': {
      id: '/_protected/workspace/'
      path: '/workspace'
      fullPath: '/workspace'
      preLoaderRoute: typeof ProtectedWorkspaceIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/workspace/$workspaceId/': {
      id: '/_protected/workspace/$workspaceId/'
      path: '/'
      fullPath: '/workspace/$workspaceId/'
      preLoaderRoute: typeof ProtectedWorkspaceWorkspaceIdIndexRouteImport
      parentRoute: typeof ProtectedWorkspaceWorkspaceIdRoute
    }
    '/_protected/workspace/$workspaceId/__layout': {
      id: '/_protected/workspace/$workspaceId/__layout'
      path: '/workspace/$workspaceId'
      fullPath: '/workspace/$workspaceId'
      preLoaderRoute: typeof ProtectedWorkspaceWorkspaceId_layoutRouteImport
      parentRoute: typeof ProtectedWorkspaceWorkspaceIdRoute
    }
    '/_protected/workspace/$workspaceId/thread/$threadId': {
      id: '/_protected/workspace/$workspaceId/thread/$threadId'
      path: '/thread/$threadId'
      fullPath: '/workspace/$workspaceId/thread/$threadId'
      preLoaderRoute: typeof ProtectedWorkspaceWorkspaceIdThreadThreadIdRouteImport
      parentRoute: typeof ProtectedWorkspaceWorkspaceIdRoute
    }
  }
}

interface ProtectedWorkspaceWorkspaceIdRouteChildren {
  ProtectedWorkspaceWorkspaceId_layoutRoute: typeof ProtectedWorkspaceWorkspaceId_layoutRoute
  ProtectedWorkspaceWorkspaceIdIndexRoute: typeof ProtectedWorkspaceWorkspaceIdIndexRoute
  ProtectedWorkspaceWorkspaceIdThreadThreadIdRoute: typeof ProtectedWorkspaceWorkspaceIdThreadThreadIdRoute
}

const ProtectedWorkspaceWorkspaceIdRouteChildren: ProtectedWorkspaceWorkspaceIdRouteChildren =
  {
    ProtectedWorkspaceWorkspaceId_layoutRoute:
      ProtectedWorkspaceWorkspaceId_layoutRoute,
    ProtectedWorkspaceWorkspaceIdIndexRoute:
      ProtectedWorkspaceWorkspaceIdIndexRoute,
    ProtectedWorkspaceWorkspaceIdThreadThreadIdRoute:
      ProtectedWorkspaceWorkspaceIdThreadThreadIdRoute,
  }

const ProtectedWorkspaceWorkspaceIdRouteWithChildren =
  ProtectedWorkspaceWorkspaceIdRoute._addFileChildren(
    ProtectedWorkspaceWorkspaceIdRouteChildren,
  )

interface ProtectedRouteChildren {
  ProtectedWorkspaceIndexRoute: typeof ProtectedWorkspaceIndexRoute
  ProtectedWorkspaceWorkspaceIdRoute: typeof ProtectedWorkspaceWorkspaceIdRouteWithChildren
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedWorkspaceIndexRoute: ProtectedWorkspaceIndexRoute,
  ProtectedWorkspaceWorkspaceIdRoute:
    ProtectedWorkspaceWorkspaceIdRouteWithChildren,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  LoginRoute: LoginRoute,
  _rootNotFoundRoute: _rootNotFoundRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
